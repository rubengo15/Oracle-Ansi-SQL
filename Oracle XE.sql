SELECT * FROM emp;
--LA MEJOR PRAXIS ES UTILIZAR EL NOMBRE DE LOS CAMPOS--
--CONTROL + ENTER = EJECUTA LA LINEA DONDE ESTEMOS POSICIONADOS--
SELECT apellido, oficio, salario FROM emp;
--ORDENACION DE DATOS--
-- LA ORDENACION DE BASE SIEMPRE ES ASCENDENTE--
SELECT * FROM emp ORDER BY apellido;
-- PARA PONERLO ASCENDENTE SE USA EL ASC AL FINAL--
SELECT * FROM emp ORDER BY apellido ASC;
-- PARA PONERLO DESCENDENTE SE USA EL DESC AL FINAL--
SELECT * FROM emp ORDER BY apellido DESC;
--ORDENAR POR MAS DE UN CAMPO--
SELECT * FROM emp ORDER BY dept_no, oficio;
--FILTRADO DE REGISTROS--
--OPERADORES DE COMPARACION--
/* 
= IGUAL
>= MAYOR O IGUAL
<= MENOR O IGUAL
> MAYOR
< MENOR
<> DISTINTO
*/
--ORACLE POR DEFECTO DIFERENCIA ENTRE MAYUSCULAS Y MINUSCULAS EN SUS TEXTOS (STRING/VARCHAR)--
--TODO LO QUE NO SEA UN NUMERO SE ESCRIBE ENTRE COMILLAS SIMPLES '..'--
-- PARA FILTRAR SE UTILIZA LA PALABRA where Y SE ESCRIBE SOLAMENTE UNA VEZ EN TODA LA CONSULTA
-- DESPUES DEL FROM
--  MOSTRAR TODOS LOS EMPLANEADOS DEL DEPARTAMENTO 10
SELECT * FROM emp WHERE dept_no = 10; 
--  MOSTRAR TODOS LOS EMPLEADOS CUYO OFICIO SEA DIRECTOR
SELECT * FROM emp WHERE oficio = 'DIRECTOR';
--  MOSTRAR TODOS LOS OFICIOS QUE SEAN DIFERENTES A DIRECTOR
SELECT * FROM emp WHERE oficio <> 'DIRECTOR';
SELECT * FROM emp WHERE oficio != 'DIRECTOR';

-- OPERADORES RELACIONALES
-- NOS PERMITEN REALIZAR MAS DE UNA PREGUNTA DENTRO DE UNA CONSULTA
/*
OR --> MUESTRA LOS DATOS DE CADA FILTRO
AND --> TODOS LOS FILTROS DEBEN CUMPLIRSE
NOT --> NEGACION DE UNA CONDICION (EVITARLO SIEMPRE)
*/
--  MOSTRAR LOS EMPLEADOS DEL DEPARTAMENTO 10 Y QUE TENGAN OFICIO DIRECTOR
SELECT * FROM emp WHERE dept_no = 10 AND oficio = 'DIRECTOR';
SELECT * FROM emp WHERE dept_no = 10 OR oficio = 'DIRECTOR';
--  MOSTRAR LOS EMPLEADOS DEL DEPARTAMENTO 10 Y DEL DEPARTAMENTO 20
SELECT * FROM emp WHERE dept_no = 10 AND dept_no = 20; -- ESTE NO MUESTRA NADA AL NO HABER EMPLEADOS QUE COMPARTAN AMBOS DEPARTAMENTOS
SELECT * FROM emp WHERE dept_no = 10 OR dept_no = 20;
-- TENEMOS OTROS OPERADORES ADEMAS DE LOS ESTANDAR
-- BETWEEN MUESTRA LOS DATOS ENTRE UN RANGO INCLUSIVE
--  MOSTRAR LOS EMPLEADOS CUYO SALARIO ESTE ENTRE 251000 Y 390000
SELECT * FROM emp WHERE salario BETWEEN 251000 AND 390000 ORDER BY salario DESC; -- ordenador por salio de forma descendente
-- PODEMOS HACER LA MISMA CONSULTA CON OPERADORES Y ES EFICIENTE
SELECT * FROM emp WHERE salario >= 251000 AND salario <= 390000 ORDER BY salario DESC;
-- LA NEGACION ES ALGO DE LO QUE DEBEMOS DE HUIR
--  MOSTRAR LOS EMPLEADOS QUE NO SEAN DIRECTOR
SELECT * FROM emp WHERE NOT oficio = 'DIRECTOR'; -- EL not SIEMPRE VA DESPUES DEL WHERE
-- PODEMOS REALIZAR LA CONSULTA CON OPERADOR
SELECT * FROM emp WHERE oficio <> 'DIRECTOR';
-- EXISTE UN OPERADOR PARA BUSCAR COINCIDENCIAS EN TEXTO
-- NOS PERMITE MEDIANTE CARACTERES ESPECIALES HACER FILTROS DE TEXTO
/* 
% BUSCA CULAQUIER CARACTER Y LOGINTUD
_ UN CARACTER CUALQUIERA
? UN CARACTER NUMERICO
*/
--  MOSTRAR LOS EMPLEADOS CUYOS APELLIDOS EMPIEZAN POR S
SELECT * FROM emp WHERE apellido LIKE 's%';
--  MOSTRAR LOS EMPLEADOS CUYOS APELLIDOS FINALIZA EN A
SELECT * FROM emp WHERE apellido LIKE '%a';
--  MOSTRAR TODOS LOS EMPLEADOS CUYOS APELLIDOS SEAN DE CUATRO LETRAS
SELECT * FROM emp WHERE apellido LIKE '____'; -- CADA GUION BAJO ES UNA LETRA, POR ESO HAY 4 GUIONES BAJOS
-- EXISTE OTRO OPERADOR PARA BUSCAR COINCIDENCIAS DE IGUALDAD EN UN MISMO CAMPO
-- IN (VALOR1, VALOR2)
--  MOSTRA LOS EMPLEADOS DEL DEPARTAMENTO 10 Y DEL 20
SELECT * FROM emp WHERE dept_no IN (10, 20, 30);
-- NOT IN (VALOR1, VALOR2) MUESTRA LOS QUE NOS ESTAN DENTRO DE ESTOS VALORES
SELECT * FROM emp WHERE dept_no NOT IN (10, 20); 

-- CAMPOS CALCULADOS
-- UN CAMPO CALCULADO ES UNA HERRAMIENTA EN UNA CONSULTA
-- UN CAMPO CALCULADO SIEMPRE DEBE DE TENER UN ALIAS
-- SIRVE PARA GENERENAR CAMPOS QUE NO EXISTAN EN LA TABLA Y LOS PODEMOS CALCULAR
-- MOSTRAR EL APELLIDO, EL SALARIO, COMISION Y EL SALARIO TOTAL DE TODOS LOS EMPLEADOS (SALARIO + COMISION) DE TODOS LOS EMPLEADOS
SELECT APELLIDO, SALARIO AS SUELDO, COMISION, (SALARIO + COMISION) AS TOTAL FROM emp;
-- UN CAMPO CALCULADO ES SOLO PARA EL CURSOR
-- MOSTRAR EL APELLIDO, EL SALARIO, COMISION Y EL SALARIO TOTAL DE TODOS LOS EMPLEADOS (SALARIO + COMISION) DE TODOS LOS EMPLEADOS CUYO SALARIO + COMISION SEA MAYOR A 344500
SELECT APELLIDO, SALARIO AS SUELDO, COMISION, (SALARIO + COMISION) AS TOTAL FROM emp WHERE (SALARIO + COMISION) >= 344500;
-- QUEREMOS LA CONSULTA ORIGINAL Y ORDENAR POR ELLA
SELECT APELLIDO, SALARIO AS SUELDO, COMISION, (SALARIO + COMISION) AS TOTAL FROM emp ORDER BY TOTAL; -- ORDER BY AFECTA SOBRE EL SELECT, DESPUES IRIA EL WHERE
-- CLAUSULA DISTINC: SE UTILIZA PARA EL SELECT Y LO QUE REALIZA ES ELIMINAR REPETIDOS DE LA CONSULTA
-- MOSTRAR EL OFICIO DE LOS EMPLEADOS
SELECT OFICIO FROM emp;
-- MOSTRAR LOS DIFERENTES OFICIOS DE LOS EMPLEADOS
SELECT DISTINCT OFICIO FROM emp;
-- MOSTRAR LOS DIFERENTES OFICIOS Y APELLIDOS DE LOS EMPLEADOS (NO TIENE SENTIDO HACERLO)
SELECT DISTINCT OFICIO, APELLIDO FROM emp;

--  CONSULAS DE SELECCION

SELECT * FROM enfermo;



--                                              EJERCICIOS

-- EJERCICIO 6
-- Mostrar todos los enfermos nacidos antes del 11/01/1970.
SELECT * FROM enfermo;
DESC enfermo; --muestra la informacion de la tabla
SELECT * FROM enfermo WHERE FECHA_NAC < '11/01/1970';
-- EJERCICIO 7
-- Igual que el anterior, para los nacidos antes del 1/1/1970 ordenados por número de inscripción.
SELECT * FROM enfermo WHERE FECHA_NAC < '11/01/1970' ORDER BY INSCRIPCION;
-- EJERCICIO 8
-- Listar todos los datos de la plantilla del hospital del turno de mañana
SELECT * FROM plantilla;
SELECT * FROM plantilla WHERE TURNO = 'M';
-- EJERCICIO 9
-- Idem del turno de noche.
SELECT * FROM plantilla;
SELECT * FROM plantilla WHERE TURNO = 'N';
-- EJERCICIO 10
-- Listar los doctores que su salario anual supere 3.000.000 €.
SELECT * FROM plantilla;
SELECT (SALARIO*12) AS SUELDO_ANUAL FROM plantilla WHERE (SALARIO*12) > 3000000;
SELECT * FROM plantilla WHERE (SALARIO*12) > 3000000;
-- EJERCICIO 11
-- Visualizar los empleados de la plantilla del turno de mañana que tengan un salario entre 2.000.000 y 2.250.000.
SELECT * FROM plantilla WHERE TURNO = 'M';
SELECT * FROM plantilla WHERE TURNO = 'M' AND (SALARIO >= 200000 and SALARIO <= 225000);
-- EJERCICIO 12
-- Visualizar los empleados de la tabla emp que no se dieron de alta entre el 01/01/1986 y el 12/12/1994.
SELECT * FROM emp;
SELECT * FROM emp WHERE (FECHA_ALT <= '01/01/86' OR FECHA_ALT >= '12/12/94') AND OFICIO = 'EMPLEADO'; -- EJERCICIO CORRECTO
SELECT * FROM emp WHERE (FECHA_ALT >= '01/01/86' AND FECHA_ALT <= '12/12/94') AND OFICIO = 'EMPLEADO'; -- MUESTRA LOS QUE SI SE DIERON DE ALTA ENTRE ESAS FECHAS
SELECT * FROM emp WHERE NOT ( FECHA_ALT >= '01/01/86' AND FECHA_ALT <= '12/12/94') AND OFICIO = 'EMPLEADO'; -- EJERCICIO CORRECTO TAMBIEN USANDO EL not
-- EERCICIO 13
-- Mostrar los nombres de los departamentos situados en Madrid o en Barcelona.
SELECT * FROM dept;
SELECT DNOMBRE FROM dept;
SELECT DNOMBRE, LOC FROM dept WHERE LOC = 'BARCELONA' OR LOC = 'MADRID';
SELECT DISTINCT DNOMBRE,LOC FROM dept WHERE LOC IN ('BARCELONA','MADRID');
SELECT DNOMBRE, LOC FROM dept WHERE LOC IN ('BARCELONA','MADRID'); -- EJERCICIO CORRECTO

-- CONSULTAS DE AGRUPACION
-- ESTE TIPO DE CONSULTAS NOS PERMITEN MOSTRAR ALGUN RESUMEN SOBRE UN GRUPO DETERMINADO DE LOS DATOS
-- UTILIZAN FUNCIONES DE AGRUPACION PARA CONSEGUIR EL RESUMEN
-- LAS FUNCIONES DEBEN TENER ALIAS
-- COUNT (*): CUENTA EL NUMERO DE REGISTROS, INCLUYENDO NULOS
-- COUNT (CAMPO): CUENTA EL NUMERO DE REGISTROS SIN NULOS
-- SUM (NUMERO): SUMA EL TOTAL DE UN CAMPO NUMERICO
-- AVG (NUMERO): RECUPERA LA MEDIA DE UN CAMPO NUMERICO
-- MAX (CAMPO): DEVUELVE EL MAXIMO VALOR DE UN CAMPO
-- MIN (CAMPO): DEVUELVE EL MINIMO VALOR DE UN CAMPO

-- MOSTRAR EL NUMERO DE REGISTROS DE LA TABLA DOCTOR
SELECT COUNT(*) AS numero_doctores FROM doctor;
SELECT COUNT(apellido) AS numero_doctores FROM doctor;
-- PODEMOS COMBINAR SIN PROBLEMA VARIAS FUNCIONES
-- QUEREMOS EL NUMERO DE DOCTORES Y EL MAXIMO DE SALARIO
SELECT COUNT (*) AS doctores, MAX (salario) AS maximo FROM doctor;
-- LOS DATOS RESULTANTES DE LAS FUNCIONES PODEMOS AGRUPARLOS POR ALGUN CAMPO O CAMPOS DE LA TABLA
-- CUANDO QUEREMOS AGRUPAR UTILIZAMOS group by DESPUES DEL from
--TRUCO: DEBEMOS AGRUPAR POR CADA CAMPO QUE NO SEA UNA FUNCION

-- MOSTRAR CUANTOS DOCTORES EXISTEN POR CADA ESPECIALIDAD
SELECT * FROM doctor;
SELECT COUNT (*) AS doctores, especialidad FROM DOCTOR GROUP BY especialidad;

-- MOSTRAR NUMERO DE PERSONAS Y MAXIMO SALARIO DE LOS EMPLEADOS POR CADA DEPARTAMENTO Y OFICIO
SELECT COUNT (*) AS personas, MAX (salario) AS maximo_salario, dept_no, oficio FROM emp GROUP BY dept_no, oficio;

-- MOSTRAR EL NUMERO DE PERSONAS DE LA PLANTILLA
SELECT COUNT (*) AS personas FROM plantilla;

-- MOSTRAR EL NUMERO DE PERSONAS DE LA PLANTILLA POR CADA TURNO
SELECT COUNT (*) AS personas, turno FROM plantilla GROUP BY turno;
SELECT turno, COUNT (*) AS personas FROM plantilla GROUP BY turno;

-- FILTRANDO EN CONSULTAS DE AGRUPACION
-- TENEMOS DOS POSIBILIDADES:
-- WHERE: ANTES DEL GROUP BY Y PARA FILTRAR SOBRE LA TABLA
-- HAVING: DESPUES DEL GROUP BY Y PARA FILTRAR SOBRE EL CONJUNTO

-- MOSTRAR CUANTOS EMPLEADOS TENEMOS POR CADA OFICIO
SELECT COUNT (*) AS empleados, oficio FROM emp GROUP BY oficio;

-- MOSTRAR CUANTOS EMPLEADOS TENEMOS POR CADA OFICIO QUE COBREN MAS DE 200000
SELECT COUNT (*) AS empleados, oficio FROM emp WHERE salario > 200000 GROUP BY oficio;

-- MOSTRAR CUANTOS EMPLEADOS TENEMOS POR CADA OFICIO Y QUE SEAN ANALISTAS O VENDEDORES
-- (PODEMOS DECIDIR CON HAVING O WHERE)
SELECT COUNT (*) AS empleados, oficio FROM emp GROUP BY oficio HAVING oficio IN ('ANALISTA', 'VENDEDOR'); -- MAS RAPIDO
SELECT COUNT (*) AS empleados, oficio FROM emp WHERE oficio IN ('ANALISTA', 'VENDEDOR') GROUP BY oficio;

-- CUANDO NO PODEMOS DECIDIR Y ESTAMOS OBLIGADOS A USAR HAVING:
-- SI QUEREMOS FILTRAR POR UNA FUNCION DE AGRUPACION

-- MOSTRAR CUANTOS EMPLEADOS TENEMOS POR CADA OFICIO SOLAMENTE DONDE TENGAMOS 2 O MAS EMPLEADOS DEL MISMO OFICIO
SELECT COUNT (*) AS empleados, oficio FROM emp GROUP BY oficio HAVING COUNT (*) >= 2;



























